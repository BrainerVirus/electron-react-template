name: Release

on:
  push:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check formatting
        run: npx prettier --check .

  test_and_coverage:
    name: Run Tests and Generate Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit/integration tests
        run: npm test

      - name: Generate code coverage report
        run: npm run coverage

      - name: Upload Vitest HTML Test Report
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests fail
        with:
          name: vitest-html-report
          path: report/
          retention-days: 30

      - name: Upload Vitest HTML Coverage Report
        uses: actions/upload-artifact@v4
        if: always() # Upload even if coverage generation fails
        with:
          name: vitest-coverage-report
          path: coverage/
          retention-days: 30

  deploy_reports_to_pages: # Renamed slightly to avoid conflict if you had it elsewhere
    name: Deploy Reports to GitHub Pages (from main)
    runs-on: ubuntu-latest
    needs: test_and_coverage # Ensure tests and coverage from main have run
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # Checkout main branch code

      # We need to download the artifacts produced by the test_and_coverage job IN THIS WORKFLOW
      - name: Download Test Report artifact (from main)
        uses: actions/download-artifact@v4
        with:
          name: vitest-html-report # Matches upload name in test_and_coverage
          path: downloaded-artifacts/vitest-html-report

      - name: Download Coverage Report artifact (from main)
        uses: actions/download-artifact@v4
        with:
          name: vitest-coverage-report # Matches upload name in test_and_coverage
          path: downloaded-artifacts/vitest-coverage-report

      - name: Prepare reports for GitHub Pages
        run: |
          mkdir -p ./.github-pages/tests
          mkdir -p ./.github-pages/coverage

          if [ -d "downloaded-artifacts/vitest-html-report" ]; then
              echo "Moving vitest-html-report to ./.github-pages/tests/"
              mv downloaded-artifacts/vitest-html-report/* ./.github-pages/tests/
          else
              echo "Warning: vitest-html-report artifact (from main) not found."
          fi

          if [ -d "downloaded-artifacts/vitest-coverage-report" ]; then
              echo "Moving vitest-coverage-report to ./.github-pages/coverage/"
              mv downloaded-artifacts/vitest-coverage-report/* ./.github-pages/coverage/
          else
              echo "Warning: vitest-coverage-report artifact (from main) not found."
          fi

          echo "Creating a root index.html for navigation..."
          cat <<EOF > ./.github-pages/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Electron React Template - CI Reports (Main Branch)</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; margin: 0; padding: 0; background-color: #f4f7f6; color: #333; display: flex; flex-direction: column; align-items: center; min-height: 100vh; text-align: center; }
                  .container { background-color: #ffffff; padding: 2em 3em; border-radius: 8px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); margin-top: 3em; max-width: 600px; width: 90%; }
                  h1 { color: #2c3e50; margin-bottom: 0.5em; font-size: 2em; }
                  p { color: #555; line-height: 1.6; margin-bottom: 1.5em; }
                  ul { list-style: none; padding: 0; margin-bottom: 2em; }
                  li { margin-bottom: 1em; }
                  a { color: #3498db; text-decoration: none; font-weight: bold; padding: 0.5em 1em; border: 1px solid #3498db; border-radius: 4px; transition: background-color 0.3s ease, color 0.3s ease; display: inline-block; }
                  a:hover { background-color: #3498db; color: #ffffff; }
                  footer { margin-top: auto; padding: 1.5em 0; font-size: 0.9em; color: #7f8c8d; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>ðŸ“Š CI Reports (Main Branch)</h1>
                  <p>Automated test and coverage reports for the Electron React Template project.</p>
                  <ul>
                      <li><a href="./tests/">View Test Results</a></li>
                      <li><a href="./coverage/">View Coverage Report</a></li>
                  </ul>
              </div>
              <footer>
                  Generated by GitHub Actions from the main branch.
              </footer>
          </body>
          </html>
          EOF
          echo "Contents of ./.github-pages for deployment:"
          ls -R ./.github-pages/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./.github-pages/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [lint, test_and_coverage]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            script: dist:win
            artifact_name: app-artifacts-windows
          - os: macOS-latest
            script: dist:mac
            artifact_name: app-artifacts-mac
          - os: ubuntu-latest
            script: dist:linux
            artifact_name: app-artifacts-linux
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run ${{ matrix.script }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts-windows
          path: windows-build
      - name: Download macOS build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts-mac
          path: mac-build
      - name: Download Linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts-linux
          path: linux-build
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
