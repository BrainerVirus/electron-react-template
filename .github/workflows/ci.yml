name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check formatting
        run: npx prettier --check .

  test_and_coverage:
    name: Run Tests and Generate Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit/integration tests
        run: npm test

      - name: Generate code coverage report
        run: npm run coverage

      - name: Upload Vitest HTML Test Report
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests fail
        with:
          name: vitest-html-report
          path: report/
          retention-days: 30

      - name: Upload Vitest HTML Coverage Report
        uses: actions/upload-artifact@v4
        if: always() # Upload even if coverage generation fails
        with:
          name: vitest-coverage-report
          path: coverage/
          retention-days: 30
  deploy_reports:
    name: Deploy Vitest Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: test_and_coverage # Depends on tests/coverage to ensure artifact exists
    permissions:
      pages: write # Grants the workflow permission to deploy to GitHub Pages
      id-token: write # Required for OIDC authentication by actions/deploy-pages

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Sets the environment URL

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage report artifact
        # Download the 'vitest-coverage-report' artifact
        # It will be downloaded into `downloaded-artifacts/vitest-coverage-report/`
        uses: actions/download-artifact@v4
        with:
          name: vitest-coverage-report
          path: downloaded-artifacts/ # Download all artifacts into this path

      - name: Prepare reports for GitHub Pages
        run: |
          # Create the root directory for GitHub Pages content
          mkdir -p ./.github-pages

          # Move contents of downloaded coverage report artifact directly to the root of .github-pages
          # The artifact was named 'vitest-coverage-report' and uploaded from 'coverage/'
          # So when downloaded, its content is at `downloaded-artifacts/vitest-coverage-report/`
          if [ -d "downloaded-artifacts/vitest-coverage-report" ]; then
              echo "Moving vitest-coverage-report to ./.github-pages/"
              mv downloaded-artifacts/vitest-coverage-report/* ./.github-pages/
          else
              echo "Warning: vitest-coverage-report artifact directory not found at downloaded-artifacts/vitest-coverage-report."
          fi

          echo "Contents of ./.github-pages for deployment:"
          ls -R ./.github-pages/

      - name: Upload Pages artifact
        # This action takes the prepared directory (`.github-pages`) and creates a special
        # 'pages-artifact' that the deploy-pages action can pick up.
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./.github-pages/ # Path to the directory containing all your static content

      - name: Deploy to GitHub Pages
        id: deployment
        # This action consumes the 'pages-artifact' and publishes it to GitHub Pages.
        uses: actions/deploy-pages@v4
